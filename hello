void SOR(double** phi, double** ustar, double** vstar, double tol, double alpha, double H, double U, double L, double h, double dt, int M, int N)
{
    double** phiStar  = calloc(M, sizeof( double *));
    double** dustardx  = calloc(M, sizeof( double *));
    double** dvstardy  = calloc(M, sizeof( double *));
    double** d2phidx2  = calloc(M, sizeof( double *));
    double** d2phidy2  = calloc(M, sizeof( double *));
    for (int k = 0; k<M; k++)
    {
        phiStar[k] = calloc(N,sizeof(double));
        dustardx[k] = calloc(N,sizeof(double));
        dvstardy[k] = calloc(N,sizeof(double));
        d2phidx2[k] = calloc(N,sizeof(double));
        d2phidy2[k] = calloc(N,sizeof(double));
    }

    double R = 0;
    double sumR = 0;
    double error = 1;
    int iter = 0;
    dudx_fun(ustar,dustardx,h,M,N); //Erreur avec vstar!!!!@@@@@ attention!
    dvdy_fun(vstar,dvstardy,h,M,N);
    int leftWall;
    int bottomWall;

    while (error > tol && iter < 100)
    {
        sumR = 0;
        bottomWall = 1
        for (int j=0; j<N; j++)
        {
            leftWall = 1;
            for (int i=0; i<M; i++)
            {
                phiStar[i][j] = 1/4 * (-1* pow(h,2)*(dustardx[i][j]+dvstardy[i][j])/dt + phi[i+2][j+1] + (1-leftWall)*phi[i][j+1] + phi[i+1][j+2] + (1-bottomWall)*phi[i+1][j]);
                phi[i+1][j+1] = (alpha*phiStar[i][j] + (1-alpha) * phi[i+1][j+1])/(1-0.25*alpha*(bottomWall+leftWall)); //remplacer phistar direct ?
                leftWall = 0;

            }
            //cond limite paroies lat
            phi[M+1][j+1] = phi[M][j+1];
            bottomWall = 0;
        }

        //cond limite paroies horizontales
        for (int i=0; i<M; i++)
        {
            phi[i+1][N+1] = phi[i+1][N];
        }
        for (int j=0; j<N; j++)
        {
            for (int i=0; i<M; i++)
            {
                d2Tdx2_fun(phi,d2phidx2,h,M,N);
                d2Tdy2_fun(phi,d2phidy2,h,M,N);
                R = (d2phidx2[i][j]+d2phidy2[i][j]) - 1/dt*(dustardx[i][j]+dvstardy[i][j]);
//                printf("dvstardy = %f\n",dvstardy[i][j]);
                sumR += R*R;
            }
        }
        error = (dt*H/U)*sqrt(1/(L*H)*sumR*h*h);
        printf("SOR global error = %f\n",error);
        //iter++;
        //printf("%d\n",iter);
    }
